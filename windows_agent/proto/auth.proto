syntax = "proto3";

package auth;
option go_package = "github.com/imyazip/GoSIEM/auth/;auth";

// Сервис авторизации
service AuthService {
// API для сенсоров
rpc ValidateAPIKey (ValidateAPIKeyRequest) returns (ValidateAPIKeyResponse);
rpc GenerateJWTForSensor (GenerateJWTForSensorRequest) returns (GenerateJWTForSensorResponse);

// API для пользователей
rpc Login (LoginRequest) returns (LoginResponse);
rpc ValidateJWT (ValidateJWTRequest) returns (ValidateJWTResponse);

// Управление пользователями
rpc CreateUser (CreateUserRequest) returns (CreateUserResponse);
rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse);

// Управление ролями
rpc GetUserRole (GetUserRoleRequest) returns (GetUserRoleResponse);
rpc SetUserRole (SetUserRoleRequest) returns (SetUserRoleResponse);

// Управление API-ключами
rpc GenerateAPIKey (GenerateAPIKeyRequest) returns (GenerateAPIKeyResponse);
rpc RevokeAPIKey (RevokeAPIKeyRequest) returns (RevokeAPIKeyResponse);
}

/////////////////////////
// Запросы и ответы
/////////////////////////

// Запрос для проверки API-ключа
message ValidateAPIKeyRequest {
string api_key = 1;
}

// Ответ для проверки API-ключа
message ValidateAPIKeyResponse {
bool valid = 1;
string sensor_id = 2;
}

// Запрос на получение JWT токена для сенсора
message GenerateJWTForSensorRequest {
string api_key = 1;  // API-ключ сенсора
}

// Ответ на запрос генерации JWT токена
message GenerateJWTForSensorResponse {
string token = 1;  // JWT токен
}

// Запрос на аутентификацию пользователя
message LoginRequest {
string username = 1;
string password = 2;
}

// Ответ на аутентификацию пользователя
message LoginResponse {
string token = 1; // JWT токен
}

// Запрос проверки валидности JWT токена
message ValidateJWTRequest {
string token = 1;
}

// Ответ проверки валидности JWT токена
message ValidateJWTResponse {
bool valid = 1;
string subject = 2; // ID пользователя или сенсора
string role = 3;    // Роль пользователя
}

/////////////////////////
// Управление пользователями
/////////////////////////

// Запрос на создание пользователя
message CreateUserRequest {
string username = 1;
string password = 2;
string role = 3; // Роль нового пользователя ("admin", "analyst", "viewer")
}

// Ответ на создание пользователя
message CreateUserResponse {
bool success = 1;
}

// Запрос на удаление пользователя
message DeleteUserRequest {
string username = 1;
}

// Ответ на удаление пользователя
message DeleteUserResponse {
bool success = 1;
}

/////////////////////////
// Управление ролями
/////////////////////////

// Запрос на получение роли пользователя
message GetUserRoleRequest {
string username = 1;
}

// Ответ на получение роли пользователя
message GetUserRoleResponse {
string role = 1;
}

// Запрос на изменение роли пользователя
message SetUserRoleRequest {
string username = 1;
string role = 2; // Новая роль ("admin", "analyst", "viewer")
}

// Ответ на изменение роли пользователя
message SetUserRoleResponse {
bool success = 1;
}

/////////////////////////
// Управление API-ключами
/////////////////////////

// Запрос на генерацию нового API-ключа
message GenerateAPIKeyRequest {
string description = 1; // Описание сенсора
}

// Ответ на генерацию нового API-ключа
message GenerateAPIKeyResponse {
string api_key = 1; // Новый API-ключ
}

// Запрос на отзыв API-ключа
message RevokeAPIKeyRequest {
string api_key = 1;
}

// Ответ на отзыв API-ключа
message RevokeAPIKeyResponse {
bool success = 1;
}
