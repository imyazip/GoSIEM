// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthService_GenerateKey_FullMethodName  = "/auth.AuthService/GenerateKey"
	AuthService_ValidateKey_FullMethodName  = "/auth.AuthService/ValidateKey"
	AuthService_RegisterUser_FullMethodName = "/auth.AuthService/RegisterUser"
	AuthService_Login_FullMethodName        = "/auth.AuthService/Login"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис авторизации
type AuthServiceClient interface {
	// Генерация нового API-ключа
	GenerateKey(ctx context.Context, in *GenerateKeyRequest, opts ...grpc.CallOption) (*GenerateKeyResponse, error)
	// Проверка API-ключа и генерация JWT
	ValidateKey(ctx context.Context, in *ValidateKeyRequest, opts ...grpc.CallOption) (*ValidateKeyResponse, error)
	// Регистрация нового пользователя
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Авторизация пользователя и генерация JWT
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) GenerateKey(ctx context.Context, in *GenerateKeyRequest, opts ...grpc.CallOption) (*GenerateKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateKeyResponse)
	err := c.cc.Invoke(ctx, AuthService_GenerateKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ValidateKey(ctx context.Context, in *ValidateKeyRequest, opts ...grpc.CallOption) (*ValidateKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateKeyResponse)
	err := c.cc.Invoke(ctx, AuthService_ValidateKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, AuthService_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AuthService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility.
//
// Сервис авторизации
type AuthServiceServer interface {
	// Генерация нового API-ключа
	GenerateKey(context.Context, *GenerateKeyRequest) (*GenerateKeyResponse, error)
	// Проверка API-ключа и генерация JWT
	ValidateKey(context.Context, *ValidateKeyRequest) (*ValidateKeyResponse, error)
	// Регистрация нового пользователя
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterResponse, error)
	// Авторизация пользователя и генерация JWT
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) GenerateKey(context.Context, *GenerateKeyRequest) (*GenerateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateKey not implemented")
}
func (UnimplementedAuthServiceServer) ValidateKey(context.Context, *ValidateKeyRequest) (*ValidateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateKey not implemented")
}
func (UnimplementedAuthServiceServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedAuthServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}
func (UnimplementedAuthServiceServer) testEmbeddedByValue()                     {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_GenerateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GenerateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GenerateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GenerateKey(ctx, req.(*GenerateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ValidateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ValidateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ValidateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ValidateKey(ctx, req.(*ValidateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateKey",
			Handler:    _AuthService_GenerateKey_Handler,
		},
		{
			MethodName: "ValidateKey",
			Handler:    _AuthService_ValidateKey_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _AuthService_RegisterUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}

const (
	Persmissions_GetUserPermissions_FullMethodName    = "/auth.Persmissions/GetUserPermissions"
	Persmissions_GetKeyPermissions_FullMethodName     = "/auth.Persmissions/GetKeyPermissions"
	Persmissions_UpdateUserPermissions_FullMethodName = "/auth.Persmissions/UpdateUserPermissions"
	Persmissions_UpdateKeyPermissions_FullMethodName  = "/auth.Persmissions/UpdateKeyPermissions"
)

// PersmissionsClient is the client API for Persmissions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис разрешений
type PersmissionsClient interface {
	// Запрос разрешений пользователя
	GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (*GetUserPermissionsResponse, error)
	// Запрос разрешений API - ключа
	GetKeyPermissions(ctx context.Context, in *GetKeyPermissionsRequest, opts ...grpc.CallOption) (*GetKeyPermissionsResponse, error)
	// Обновить разрешения пользователя
	UpdateUserPermissions(ctx context.Context, in *UpdateUserPermissionsRequest, opts ...grpc.CallOption) (*UpdateUserPermissionsResponse, error)
	// Обновить разрешения API - ключа
	UpdateKeyPermissions(ctx context.Context, in *UpdateKeyPermissionsRequest, opts ...grpc.CallOption) (*UpdateKeyPermissionsResponse, error)
}

type persmissionsClient struct {
	cc grpc.ClientConnInterface
}

func NewPersmissionsClient(cc grpc.ClientConnInterface) PersmissionsClient {
	return &persmissionsClient{cc}
}

func (c *persmissionsClient) GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (*GetUserPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPermissionsResponse)
	err := c.cc.Invoke(ctx, Persmissions_GetUserPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persmissionsClient) GetKeyPermissions(ctx context.Context, in *GetKeyPermissionsRequest, opts ...grpc.CallOption) (*GetKeyPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKeyPermissionsResponse)
	err := c.cc.Invoke(ctx, Persmissions_GetKeyPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persmissionsClient) UpdateUserPermissions(ctx context.Context, in *UpdateUserPermissionsRequest, opts ...grpc.CallOption) (*UpdateUserPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserPermissionsResponse)
	err := c.cc.Invoke(ctx, Persmissions_UpdateUserPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persmissionsClient) UpdateKeyPermissions(ctx context.Context, in *UpdateKeyPermissionsRequest, opts ...grpc.CallOption) (*UpdateKeyPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateKeyPermissionsResponse)
	err := c.cc.Invoke(ctx, Persmissions_UpdateKeyPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersmissionsServer is the server API for Persmissions service.
// All implementations must embed UnimplementedPersmissionsServer
// for forward compatibility.
//
// Сервис разрешений
type PersmissionsServer interface {
	// Запрос разрешений пользователя
	GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error)
	// Запрос разрешений API - ключа
	GetKeyPermissions(context.Context, *GetKeyPermissionsRequest) (*GetKeyPermissionsResponse, error)
	// Обновить разрешения пользователя
	UpdateUserPermissions(context.Context, *UpdateUserPermissionsRequest) (*UpdateUserPermissionsResponse, error)
	// Обновить разрешения API - ключа
	UpdateKeyPermissions(context.Context, *UpdateKeyPermissionsRequest) (*UpdateKeyPermissionsResponse, error)
	mustEmbedUnimplementedPersmissionsServer()
}

// UnimplementedPersmissionsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPersmissionsServer struct{}

func (UnimplementedPersmissionsServer) GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissions not implemented")
}
func (UnimplementedPersmissionsServer) GetKeyPermissions(context.Context, *GetKeyPermissionsRequest) (*GetKeyPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyPermissions not implemented")
}
func (UnimplementedPersmissionsServer) UpdateUserPermissions(context.Context, *UpdateUserPermissionsRequest) (*UpdateUserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPermissions not implemented")
}
func (UnimplementedPersmissionsServer) UpdateKeyPermissions(context.Context, *UpdateKeyPermissionsRequest) (*UpdateKeyPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeyPermissions not implemented")
}
func (UnimplementedPersmissionsServer) mustEmbedUnimplementedPersmissionsServer() {}
func (UnimplementedPersmissionsServer) testEmbeddedByValue()                      {}

// UnsafePersmissionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersmissionsServer will
// result in compilation errors.
type UnsafePersmissionsServer interface {
	mustEmbedUnimplementedPersmissionsServer()
}

func RegisterPersmissionsServer(s grpc.ServiceRegistrar, srv PersmissionsServer) {
	// If the following call pancis, it indicates UnimplementedPersmissionsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Persmissions_ServiceDesc, srv)
}

func _Persmissions_GetUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersmissionsServer).GetUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Persmissions_GetUserPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersmissionsServer).GetUserPermissions(ctx, req.(*GetUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Persmissions_GetKeyPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersmissionsServer).GetKeyPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Persmissions_GetKeyPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersmissionsServer).GetKeyPermissions(ctx, req.(*GetKeyPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Persmissions_UpdateUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersmissionsServer).UpdateUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Persmissions_UpdateUserPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersmissionsServer).UpdateUserPermissions(ctx, req.(*UpdateUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Persmissions_UpdateKeyPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeyPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersmissionsServer).UpdateKeyPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Persmissions_UpdateKeyPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersmissionsServer).UpdateKeyPermissions(ctx, req.(*UpdateKeyPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Persmissions_ServiceDesc is the grpc.ServiceDesc for Persmissions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Persmissions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Persmissions",
	HandlerType: (*PersmissionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserPermissions",
			Handler:    _Persmissions_GetUserPermissions_Handler,
		},
		{
			MethodName: "GetKeyPermissions",
			Handler:    _Persmissions_GetKeyPermissions_Handler,
		},
		{
			MethodName: "UpdateUserPermissions",
			Handler:    _Persmissions_UpdateUserPermissions_Handler,
		},
		{
			MethodName: "UpdateKeyPermissions",
			Handler:    _Persmissions_UpdateKeyPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
